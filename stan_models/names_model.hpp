
// Code generated by stanc v2.26.1-334-g9c6819aa
#include <stan/model/model_header.hpp>
namespace names_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 31> locations_array__ = 
{" (found before start of program)",
 " (in '/model_dir/names_model.stan', line 9, column 4 to column 15)",
 " (in '/model_dir/names_model.stan', line 10, column 4 to column 28)",
 " (in '/model_dir/names_model.stan', line 11, column 4 to column 25)",
 " (in '/model_dir/names_model.stan', line 12, column 4 to column 32)",
 " (in '/model_dir/names_model.stan', line 13, column 4 to column 19)",
 " (in '/model_dir/names_model.stan', line 14, column 4 to column 24)",
 " (in '/model_dir/names_model.stan', line 18, column 4 to column 17)",
 " (in '/model_dir/names_model.stan', line 20, column 4 to column 27)",
 " (in '/model_dir/names_model.stan', line 19, column 4 to column 26)",
 " (in '/model_dir/names_model.stan', line 21, column 4 to column 49)",
 " (in '/model_dir/names_model.stan', line 26, column 4 to column 24)",
 " (in '/model_dir/names_model.stan', line 27, column 4 to column 34)",
 " (in '/model_dir/names_model.stan', line 28, column 4 to column 33)",
 " (in '/model_dir/names_model.stan', line 30, column 4 to column 34)",
 " (in '/model_dir/names_model.stan', line 31, column 4 to column 54)",
 " (in '/model_dir/names_model.stan', line 32, column 4 to column 30)",
 " (in '/model_dir/names_model.stan', line 35, column 4 to column 37)",
 " (in '/model_dir/names_model.stan', line 2, column 4 to column 10)",
 " (in '/model_dir/names_model.stan', line 3, column 4 to column 10)",
 " (in '/model_dir/names_model.stan', line 4, column 11 to column 12)",
 " (in '/model_dir/names_model.stan', line 4, column 13 to column 14)",
 " (in '/model_dir/names_model.stan', line 4, column 4 to column 18)",
 " (in '/model_dir/names_model.stan', line 5, column 11 to column 12)",
 " (in '/model_dir/names_model.stan', line 5, column 4 to column 27)",
 " (in '/model_dir/names_model.stan', line 11, column 16 to column 17)",
 " (in '/model_dir/names_model.stan', line 12, column 20 to column 21)",
 " (in '/model_dir/names_model.stan', line 13, column 11 to column 12)",
 " (in '/model_dir/names_model.stan', line 18, column 11 to column 12)",
 " (in '/model_dir/names_model.stan', line 20, column 11 to column 12)",
 " (in '/model_dir/names_model.stan', line 20, column 13 to column 14)"};



class names_model_model final : public model_base_crtp<names_model_model> {

 private:
  int N;
  int K;
  Eigen::Matrix<double, -1, -1> X__;
  Eigen::Matrix<double, -1, 1> LogSalePrice__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> LogSalePrice{nullptr, 0};
 
 public:
  ~names_model_model() { }
  
  inline std::string model_name() const final { return "names_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-334-g9c6819aa", "stancflags = "};
  }
  
  
  names_model_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "names_model_model_namespace::names_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 20;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 21;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 22;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      X__ = Eigen::Matrix<double, -1, -1>(N, K);
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X__.data(), N, K);
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 22;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 22;
            assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 22;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 23;
      validate_non_negative_index("LogSalePrice", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","LogSalePrice","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      LogSalePrice__ = Eigen::Matrix<double, -1, 1>(N);
      new (&LogSalePrice) Eigen::Map<Eigen::Matrix<double, -1, 1>>(LogSalePrice__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> LogSalePrice_flat__;
        current_statement__ = 24;
        LogSalePrice_flat__ = context__.vals_r("LogSalePrice");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          assign(LogSalePrice, LogSalePrice_flat__[(pos__ - 1)],
            "assigning variable LogSalePrice", index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      validate_non_negative_index("Omega", "K", K);
      current_statement__ = 25;
      validate_non_negative_index("Omega", "K", K);
      current_statement__ = 26;
      validate_non_negative_index("tau_beta", "K", K);
      current_statement__ = 27;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 28;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 29;
      validate_non_negative_index("Sigma_beta", "K", K);
      current_statement__ = 30;
      validate_non_negative_index("Sigma_beta", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + ((K * (K - 1)) / 2) + K + K + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "names_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau_alpha;
      tau_alpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      tau_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> Omega;
      Omega = Eigen::Matrix<local_scalar_t__, -1, -1>(K, K);
      stan::math::fill(Omega, DUMMY_VAR__);
      
      current_statement__ = 3;
      Omega = in__.template read_constrain_corr_matrix<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau_beta;
      tau_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(tau_beta, DUMMY_VAR__);
      
      current_statement__ = 4;
      tau_beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   0, lp__, K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 5;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 9;
      assign(mu, add(alpha, multiply(X, beta)), "assigning variable mu");
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_beta;
      Sigma_beta = Eigen::Matrix<local_scalar_t__, -1, -1>(K, K);
      stan::math::fill(Sigma_beta, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(Sigma_beta, quad_form_diag(Omega, tau_beta),
        "assigning variable Sigma_beta");
      {
        current_statement__ = 11;
        lp_accum__.add(lkj_corr_lpdf<propto__>(Omega, 1));
        current_statement__ = 12;
        lp_accum__.add(inv_gamma_lpdf<propto__>(tau_alpha, 3, 0.5));
        current_statement__ = 13;
        lp_accum__.add(inv_gamma_lpdf<propto__>(tau_beta, 3, 0.5));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 12, tau_alpha));
        current_statement__ = 15;
        lp_accum__.add(
          multi_normal_lpdf<propto__>(beta, rep_vector(0, K), Sigma_beta));
        current_statement__ = 16;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigma, 3, 0.5));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(LogSalePrice, mu, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "names_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      double tau_alpha;
      tau_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(K, K);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      Omega = in__.template read_constrain_corr_matrix<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                lp__, K);
      Eigen::Matrix<double, -1, 1> tau_beta;
      tau_beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(tau_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      tau_beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                   0, lp__, K);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma_beta;
      Sigma_beta = Eigen::Matrix<double, -1, -1>(K, K);
      stan::math::fill(Sigma_beta, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(alpha);
      vars__.emplace_back(tau_alpha);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega, "Omega", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(tau_beta[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      assign(mu, add(alpha, multiply(X, beta)), "assigning variable mu");
      current_statement__ = 10;
      assign(Sigma_beta, quad_form_diag(Omega, tau_beta),
        "assigning variable Sigma_beta");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(mu[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(Sigma_beta, "Sigma_beta",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double tau_alpha;
      tau_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_alpha = context__.vals_r("tau_alpha")[(1 - 1)];
      double tau_alpha_free__;
      tau_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_alpha_free__ = stan::math::lb_free(tau_alpha, 0);
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(K, K);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Omega_flat__;
        current_statement__ = 3;
        Omega_flat__ = context__.vals_r("Omega");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 3;
            assign(Omega, Omega_flat__[(pos__ - 1)],
              "assigning variable Omega", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> Omega_free__;
      Omega_free__ = Eigen::Matrix<double, -1, 1>(((K * (K - 1)) / 2));
      stan::math::fill(Omega_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      assign(Omega_free__, stan::math::corr_matrix_free(Omega),
        "assigning variable Omega_free__");
      Eigen::Matrix<double, -1, 1> tau_beta;
      tau_beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(tau_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> tau_beta_flat__;
        current_statement__ = 4;
        tau_beta_flat__ = context__.vals_r("tau_beta");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 4;
          assign(tau_beta, tau_beta_flat__[(pos__ - 1)],
            "assigning variable tau_beta", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> tau_beta_free__;
      tau_beta_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(tau_beta_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(tau_beta_free__,
          stan::math::lb_free(tau_beta[(sym1__ - 1)], 0),
          "assigning variable tau_beta_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 5;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 5;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      vars__.emplace_back(alpha);
      vars__.emplace_back(tau_alpha_free__);
      for (int sym1__ = 1; sym1__ <= ((K * (K - 1)) / 2); ++sym1__) {
        vars__.emplace_back(Omega_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(tau_beta_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "tau_alpha", "Omega",
      "tau_beta", "beta", "sigma", "mu", "Sigma_beta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "tau_alpha");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "tau_alpha");
    for (int sym1__ = 1; sym1__ <= ((K * (K - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau_beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"tau_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((K * (K - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"tau_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(K) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = names_model_model_namespace::names_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return names_model_model_namespace::profiles__;
}

#endif


